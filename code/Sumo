/*
   -- CODIGO FUNCIONANDO --
   
   To compile this code using RemoteXY library 3.1.13 or later version 
   download by link http://remotexy.com/en/library/
   To connect using RemoteXY mobile app by link http://remotexy.com/en/download/                   
     - for ANDROID 4.15.01 or later version;
     - for iOS 1.12.1 or later version;
    
   To interact with the GUI, please refer to the manual: 
   https://remotexy.com/ru/help/code/interaction/

   This source code was automatically generated by the RemoteXY editor and 
   is an example for the RemoteXY library. 
   Licensed under the MIT License. See the LICENSE file in the RemoteXY library
   root (https://github.com/RemoteXY/RemoteXY-Arduino-library) for full license 
   details.    
*/

//////////////////////////////////////////////
//        RemoteXY include library          //
//////////////////////////////////////////////

// you can enable debug logging to Serial at 115200
//#define REMOTEXY__DEBUGLOG    

// RemoteXY select connection mode and include library 
#define REMOTEXY_MODE__ESP32CORE_BLUETOOTH

#include <BluetoothSerial.h>

// RemoteXY connection settings 
#define REMOTEXY_BLUETOOTH_NAME "FRUGY"


#include <RemoteXY.h>

// RemoteXY GUI configuration  
#pragma pack(push, 1)  
uint8_t RemoteXY_CONF[] =   // 35 bytes
  { 255,2,0,0,0,28,0,19,0,0,0,0,31,2,106,200,200,80,1,1,
  1,0,5,11,25,150,150,158,38,33,33,32,2,26,31 };
  
// this structure defines all the variables and events of your control interface 
struct {

    // input variables
  int8_t joystick_01_x; // from -100 to 100
  int8_t joystick_01_y; // from -100 to 100

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0

} RemoteXY;   
#pragma pack(pop)
  
/////////////////////////////////////////////
//           END RemoteXY include          //
/////////////////////////////////////////////


// Salidas Motor driver TA6586-1
#define IN1A 22
#define IN1B 23

// Salidas Motor driver TA6586-2
#define IN2A 4
#define IN2B 16

// PWM's
int PWM1 = 250;  //pwm de la izquierda
int PWM2 = 250;  //pwm de la derecha

// Configuraci贸n de PWM para control de motores
const int frequency = 1000;
const int resolution = 8;

// Canales PWM del ESP32
const int ledChannel = 0;
const int ledChannel1 = 1;
const int ledChannel2 = 2;
const int ledChannel3 = 3;

void setup() 
{
  RemoteXY_Init (); 
  
  
  // TODO you setup code
    //configuracion del boton de salidas del driver
  pinMode(IN1A, OUTPUT);
  pinMode(IN1B, OUTPUT);
  pinMode(IN2A, OUTPUT);
  pinMode(IN2B, OUTPUT);

   // Configuraci贸n de PWM en cada canal y pin

  ledcSetup(ledChannel, frequency, resolution);
  ledcAttachPin(IN1A, ledChannel);

  ledcSetup(ledChannel1, frequency, resolution);
  ledcAttachPin(IN1B, ledChannel1);

  ledcSetup(ledChannel2, frequency, resolution);
  ledcAttachPin(IN2A, ledChannel2);

  ledcSetup(ledChannel3, frequency, resolution);
  ledcAttachPin(IN2B, ledChannel3);

}

void loop() 
{ 
  RemoteXY_Handler ();

  movements(RemoteXY.joystick_01_x, RemoteXY.joystick_01_y);

  
  // TODO you loop code
  // use the RemoteXY structure for data transfer
  // do not call delay(), use instead RemoteXY_delay() 

}
void motores(int izq, int der) {  //0 hasta 255 adelate 0 hasta -255 atras

  //motor izquierdo
  if (izq >= 0) {
    ledcWrite(ledChannel, izq);
    ledcWrite(ledChannel1, 0); //analog
  }
  else {
    izq = izq * (-1);
    ledcWrite(ledChannel1, izq);
    ledcWrite(ledChannel, 1);
  }
  //motor derecho//
  if (der >= 0) {
    ledcWrite(ledChannel2, der);
    ledcWrite(ledChannel3, 0);
  } else {
    der = der * (-1);
    ledcWrite(ledChannel3, der);
    ledcWrite(ledChannel2, 1);
  }
}

// ====SUMO RC====
void movements(int x, int y) {
  int v = map(y, -100, 100, -255, 255);  // avance/retroceso
  int h = map(x, -100, 100, -255, 255);  // direcci贸n

  int leftSpeed = v + h;
  int rightSpeed = v - h;

  // Limitar al rango permitido
  leftSpeed = constrain(leftSpeed, -255, 255);
  rightSpeed = constrain(rightSpeed, -255, 255);

  motores(rightSpeed, leftSpeed);  // usa tu funci贸n motores ya definida
}
